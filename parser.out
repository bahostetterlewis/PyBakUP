Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expr
Rule 1     expr -> expr OR expr
Rule 2     expr -> expr AND expr
Rule 3     expr -> expr LESS_EQUAL expr
Rule 4     expr -> expr LESS expr
Rule 5     expr -> expr GREAT_EQUAL expr
Rule 6     expr -> expr GREATER expr
Rule 7     expr -> expr EQUAL expr
Rule 8     expr -> expr PLUS expr
Rule 9     primary -> LPAREN expr RPAREN
Rule 10    expr -> operand
Rule 11    expr -> primary
Rule 12    operand -> time
Rule 13    operand -> key
Rule 14    time -> INT frame
Rule 15    frame -> MONTH
Rule 16    frame -> DAY
Rule 17    frame -> HOUR
Rule 18    frame -> MINUTE
Rule 19    key -> LAST_BACKUP
Rule 20    key -> MODIFIED
Rule 21    key -> TRUE
Rule 22    key -> FALSE

Terminals, with rules where they appear

AND                  : 2
DAY                  : 16
EQUAL                : 7
FALSE                : 22
GREATER              : 6
GREAT_EQUAL          : 5
HOUR                 : 17
INT                  : 14
LAST_BACKUP          : 19
LESS                 : 4
LESS_EQUAL           : 3
LPAREN               : 9
MINUTE               : 18
MODIFIED             : 20
MONTH                : 15
OR                   : 1
PLUS                 : 8
RPAREN               : 9
TRUE                 : 21
error                : 

Nonterminals, with rules where they appear

expr                 : 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 0
frame                : 14
key                  : 13
operand              : 10
primary              : 11
time                 : 12

Parsing method: LALR

state 0

    (0) S' -> . expr
    (1) expr -> . expr OR expr
    (2) expr -> . expr AND expr
    (3) expr -> . expr LESS_EQUAL expr
    (4) expr -> . expr LESS expr
    (5) expr -> . expr GREAT_EQUAL expr
    (6) expr -> . expr GREATER expr
    (7) expr -> . expr EQUAL expr
    (8) expr -> . expr PLUS expr
    (10) expr -> . operand
    (11) expr -> . primary
    (12) operand -> . time
    (13) operand -> . key
    (9) primary -> . LPAREN expr RPAREN
    (14) time -> . INT frame
    (19) key -> . LAST_BACKUP
    (20) key -> . MODIFIED
    (21) key -> . TRUE
    (22) key -> . FALSE

    LPAREN          shift and go to state 6
    INT             shift and go to state 4
    LAST_BACKUP     shift and go to state 3
    MODIFIED        shift and go to state 1
    TRUE            shift and go to state 11
    FALSE           shift and go to state 10

    expr                           shift and go to state 5
    primary                        shift and go to state 2
    key                            shift and go to state 8
    time                           shift and go to state 9
    operand                        shift and go to state 7

state 1

    (20) key -> MODIFIED .

    OR              reduce using rule 20 (key -> MODIFIED .)
    AND             reduce using rule 20 (key -> MODIFIED .)
    LESS_EQUAL      reduce using rule 20 (key -> MODIFIED .)
    LESS            reduce using rule 20 (key -> MODIFIED .)
    GREAT_EQUAL     reduce using rule 20 (key -> MODIFIED .)
    GREATER         reduce using rule 20 (key -> MODIFIED .)
    EQUAL           reduce using rule 20 (key -> MODIFIED .)
    PLUS            reduce using rule 20 (key -> MODIFIED .)
    $end            reduce using rule 20 (key -> MODIFIED .)
    RPAREN          reduce using rule 20 (key -> MODIFIED .)


state 2

    (11) expr -> primary .

    OR              reduce using rule 11 (expr -> primary .)
    AND             reduce using rule 11 (expr -> primary .)
    LESS_EQUAL      reduce using rule 11 (expr -> primary .)
    LESS            reduce using rule 11 (expr -> primary .)
    GREAT_EQUAL     reduce using rule 11 (expr -> primary .)
    GREATER         reduce using rule 11 (expr -> primary .)
    EQUAL           reduce using rule 11 (expr -> primary .)
    PLUS            reduce using rule 11 (expr -> primary .)
    $end            reduce using rule 11 (expr -> primary .)
    RPAREN          reduce using rule 11 (expr -> primary .)


state 3

    (19) key -> LAST_BACKUP .

    OR              reduce using rule 19 (key -> LAST_BACKUP .)
    AND             reduce using rule 19 (key -> LAST_BACKUP .)
    LESS_EQUAL      reduce using rule 19 (key -> LAST_BACKUP .)
    LESS            reduce using rule 19 (key -> LAST_BACKUP .)
    GREAT_EQUAL     reduce using rule 19 (key -> LAST_BACKUP .)
    GREATER         reduce using rule 19 (key -> LAST_BACKUP .)
    EQUAL           reduce using rule 19 (key -> LAST_BACKUP .)
    PLUS            reduce using rule 19 (key -> LAST_BACKUP .)
    $end            reduce using rule 19 (key -> LAST_BACKUP .)
    RPAREN          reduce using rule 19 (key -> LAST_BACKUP .)


state 4

    (14) time -> INT . frame
    (15) frame -> . MONTH
    (16) frame -> . DAY
    (17) frame -> . HOUR
    (18) frame -> . MINUTE

    MONTH           shift and go to state 14
    DAY             shift and go to state 15
    HOUR            shift and go to state 12
    MINUTE          shift and go to state 16

    frame                          shift and go to state 13

state 5

    (0) S' -> expr .
    (1) expr -> expr . OR expr
    (2) expr -> expr . AND expr
    (3) expr -> expr . LESS_EQUAL expr
    (4) expr -> expr . LESS expr
    (5) expr -> expr . GREAT_EQUAL expr
    (6) expr -> expr . GREATER expr
    (7) expr -> expr . EQUAL expr
    (8) expr -> expr . PLUS expr

    OR              shift and go to state 21
    AND             shift and go to state 17
    LESS_EQUAL      shift and go to state 23
    LESS            shift and go to state 19
    GREAT_EQUAL     shift and go to state 24
    GREATER         shift and go to state 18
    EQUAL           shift and go to state 20
    PLUS            shift and go to state 22


state 6

    (9) primary -> LPAREN . expr RPAREN
    (1) expr -> . expr OR expr
    (2) expr -> . expr AND expr
    (3) expr -> . expr LESS_EQUAL expr
    (4) expr -> . expr LESS expr
    (5) expr -> . expr GREAT_EQUAL expr
    (6) expr -> . expr GREATER expr
    (7) expr -> . expr EQUAL expr
    (8) expr -> . expr PLUS expr
    (10) expr -> . operand
    (11) expr -> . primary
    (12) operand -> . time
    (13) operand -> . key
    (9) primary -> . LPAREN expr RPAREN
    (14) time -> . INT frame
    (19) key -> . LAST_BACKUP
    (20) key -> . MODIFIED
    (21) key -> . TRUE
    (22) key -> . FALSE

    LPAREN          shift and go to state 6
    INT             shift and go to state 4
    LAST_BACKUP     shift and go to state 3
    MODIFIED        shift and go to state 1
    TRUE            shift and go to state 11
    FALSE           shift and go to state 10

    expr                           shift and go to state 25
    primary                        shift and go to state 2
    key                            shift and go to state 8
    time                           shift and go to state 9
    operand                        shift and go to state 7

state 7

    (10) expr -> operand .

    OR              reduce using rule 10 (expr -> operand .)
    AND             reduce using rule 10 (expr -> operand .)
    LESS_EQUAL      reduce using rule 10 (expr -> operand .)
    LESS            reduce using rule 10 (expr -> operand .)
    GREAT_EQUAL     reduce using rule 10 (expr -> operand .)
    GREATER         reduce using rule 10 (expr -> operand .)
    EQUAL           reduce using rule 10 (expr -> operand .)
    PLUS            reduce using rule 10 (expr -> operand .)
    $end            reduce using rule 10 (expr -> operand .)
    RPAREN          reduce using rule 10 (expr -> operand .)


state 8

    (13) operand -> key .

    RPAREN          reduce using rule 13 (operand -> key .)
    OR              reduce using rule 13 (operand -> key .)
    AND             reduce using rule 13 (operand -> key .)
    LESS_EQUAL      reduce using rule 13 (operand -> key .)
    LESS            reduce using rule 13 (operand -> key .)
    GREAT_EQUAL     reduce using rule 13 (operand -> key .)
    GREATER         reduce using rule 13 (operand -> key .)
    EQUAL           reduce using rule 13 (operand -> key .)
    PLUS            reduce using rule 13 (operand -> key .)
    $end            reduce using rule 13 (operand -> key .)


state 9

    (12) operand -> time .

    RPAREN          reduce using rule 12 (operand -> time .)
    OR              reduce using rule 12 (operand -> time .)
    AND             reduce using rule 12 (operand -> time .)
    LESS_EQUAL      reduce using rule 12 (operand -> time .)
    LESS            reduce using rule 12 (operand -> time .)
    GREAT_EQUAL     reduce using rule 12 (operand -> time .)
    GREATER         reduce using rule 12 (operand -> time .)
    EQUAL           reduce using rule 12 (operand -> time .)
    PLUS            reduce using rule 12 (operand -> time .)
    $end            reduce using rule 12 (operand -> time .)


state 10

    (22) key -> FALSE .

    OR              reduce using rule 22 (key -> FALSE .)
    AND             reduce using rule 22 (key -> FALSE .)
    LESS_EQUAL      reduce using rule 22 (key -> FALSE .)
    LESS            reduce using rule 22 (key -> FALSE .)
    GREAT_EQUAL     reduce using rule 22 (key -> FALSE .)
    GREATER         reduce using rule 22 (key -> FALSE .)
    EQUAL           reduce using rule 22 (key -> FALSE .)
    PLUS            reduce using rule 22 (key -> FALSE .)
    $end            reduce using rule 22 (key -> FALSE .)
    RPAREN          reduce using rule 22 (key -> FALSE .)


state 11

    (21) key -> TRUE .

    OR              reduce using rule 21 (key -> TRUE .)
    AND             reduce using rule 21 (key -> TRUE .)
    LESS_EQUAL      reduce using rule 21 (key -> TRUE .)
    LESS            reduce using rule 21 (key -> TRUE .)
    GREAT_EQUAL     reduce using rule 21 (key -> TRUE .)
    GREATER         reduce using rule 21 (key -> TRUE .)
    EQUAL           reduce using rule 21 (key -> TRUE .)
    PLUS            reduce using rule 21 (key -> TRUE .)
    $end            reduce using rule 21 (key -> TRUE .)
    RPAREN          reduce using rule 21 (key -> TRUE .)


state 12

    (17) frame -> HOUR .

    OR              reduce using rule 17 (frame -> HOUR .)
    AND             reduce using rule 17 (frame -> HOUR .)
    LESS_EQUAL      reduce using rule 17 (frame -> HOUR .)
    LESS            reduce using rule 17 (frame -> HOUR .)
    GREAT_EQUAL     reduce using rule 17 (frame -> HOUR .)
    GREATER         reduce using rule 17 (frame -> HOUR .)
    EQUAL           reduce using rule 17 (frame -> HOUR .)
    PLUS            reduce using rule 17 (frame -> HOUR .)
    $end            reduce using rule 17 (frame -> HOUR .)
    RPAREN          reduce using rule 17 (frame -> HOUR .)


state 13

    (14) time -> INT frame .

    OR              reduce using rule 14 (time -> INT frame .)
    AND             reduce using rule 14 (time -> INT frame .)
    LESS_EQUAL      reduce using rule 14 (time -> INT frame .)
    LESS            reduce using rule 14 (time -> INT frame .)
    GREAT_EQUAL     reduce using rule 14 (time -> INT frame .)
    GREATER         reduce using rule 14 (time -> INT frame .)
    EQUAL           reduce using rule 14 (time -> INT frame .)
    PLUS            reduce using rule 14 (time -> INT frame .)
    $end            reduce using rule 14 (time -> INT frame .)
    RPAREN          reduce using rule 14 (time -> INT frame .)


state 14

    (15) frame -> MONTH .

    OR              reduce using rule 15 (frame -> MONTH .)
    AND             reduce using rule 15 (frame -> MONTH .)
    LESS_EQUAL      reduce using rule 15 (frame -> MONTH .)
    LESS            reduce using rule 15 (frame -> MONTH .)
    GREAT_EQUAL     reduce using rule 15 (frame -> MONTH .)
    GREATER         reduce using rule 15 (frame -> MONTH .)
    EQUAL           reduce using rule 15 (frame -> MONTH .)
    PLUS            reduce using rule 15 (frame -> MONTH .)
    $end            reduce using rule 15 (frame -> MONTH .)
    RPAREN          reduce using rule 15 (frame -> MONTH .)


state 15

    (16) frame -> DAY .

    OR              reduce using rule 16 (frame -> DAY .)
    AND             reduce using rule 16 (frame -> DAY .)
    LESS_EQUAL      reduce using rule 16 (frame -> DAY .)
    LESS            reduce using rule 16 (frame -> DAY .)
    GREAT_EQUAL     reduce using rule 16 (frame -> DAY .)
    GREATER         reduce using rule 16 (frame -> DAY .)
    EQUAL           reduce using rule 16 (frame -> DAY .)
    PLUS            reduce using rule 16 (frame -> DAY .)
    $end            reduce using rule 16 (frame -> DAY .)
    RPAREN          reduce using rule 16 (frame -> DAY .)


state 16

    (18) frame -> MINUTE .

    OR              reduce using rule 18 (frame -> MINUTE .)
    AND             reduce using rule 18 (frame -> MINUTE .)
    LESS_EQUAL      reduce using rule 18 (frame -> MINUTE .)
    LESS            reduce using rule 18 (frame -> MINUTE .)
    GREAT_EQUAL     reduce using rule 18 (frame -> MINUTE .)
    GREATER         reduce using rule 18 (frame -> MINUTE .)
    EQUAL           reduce using rule 18 (frame -> MINUTE .)
    PLUS            reduce using rule 18 (frame -> MINUTE .)
    $end            reduce using rule 18 (frame -> MINUTE .)
    RPAREN          reduce using rule 18 (frame -> MINUTE .)


state 17

    (2) expr -> expr AND . expr
    (1) expr -> . expr OR expr
    (2) expr -> . expr AND expr
    (3) expr -> . expr LESS_EQUAL expr
    (4) expr -> . expr LESS expr
    (5) expr -> . expr GREAT_EQUAL expr
    (6) expr -> . expr GREATER expr
    (7) expr -> . expr EQUAL expr
    (8) expr -> . expr PLUS expr
    (10) expr -> . operand
    (11) expr -> . primary
    (12) operand -> . time
    (13) operand -> . key
    (9) primary -> . LPAREN expr RPAREN
    (14) time -> . INT frame
    (19) key -> . LAST_BACKUP
    (20) key -> . MODIFIED
    (21) key -> . TRUE
    (22) key -> . FALSE

    LPAREN          shift and go to state 6
    INT             shift and go to state 4
    LAST_BACKUP     shift and go to state 3
    MODIFIED        shift and go to state 1
    TRUE            shift and go to state 11
    FALSE           shift and go to state 10

    expr                           shift and go to state 26
    primary                        shift and go to state 2
    key                            shift and go to state 8
    time                           shift and go to state 9
    operand                        shift and go to state 7

state 18

    (6) expr -> expr GREATER . expr
    (1) expr -> . expr OR expr
    (2) expr -> . expr AND expr
    (3) expr -> . expr LESS_EQUAL expr
    (4) expr -> . expr LESS expr
    (5) expr -> . expr GREAT_EQUAL expr
    (6) expr -> . expr GREATER expr
    (7) expr -> . expr EQUAL expr
    (8) expr -> . expr PLUS expr
    (10) expr -> . operand
    (11) expr -> . primary
    (12) operand -> . time
    (13) operand -> . key
    (9) primary -> . LPAREN expr RPAREN
    (14) time -> . INT frame
    (19) key -> . LAST_BACKUP
    (20) key -> . MODIFIED
    (21) key -> . TRUE
    (22) key -> . FALSE

    LPAREN          shift and go to state 6
    INT             shift and go to state 4
    LAST_BACKUP     shift and go to state 3
    MODIFIED        shift and go to state 1
    TRUE            shift and go to state 11
    FALSE           shift and go to state 10

    expr                           shift and go to state 27
    primary                        shift and go to state 2
    key                            shift and go to state 8
    time                           shift and go to state 9
    operand                        shift and go to state 7

state 19

    (4) expr -> expr LESS . expr
    (1) expr -> . expr OR expr
    (2) expr -> . expr AND expr
    (3) expr -> . expr LESS_EQUAL expr
    (4) expr -> . expr LESS expr
    (5) expr -> . expr GREAT_EQUAL expr
    (6) expr -> . expr GREATER expr
    (7) expr -> . expr EQUAL expr
    (8) expr -> . expr PLUS expr
    (10) expr -> . operand
    (11) expr -> . primary
    (12) operand -> . time
    (13) operand -> . key
    (9) primary -> . LPAREN expr RPAREN
    (14) time -> . INT frame
    (19) key -> . LAST_BACKUP
    (20) key -> . MODIFIED
    (21) key -> . TRUE
    (22) key -> . FALSE

    LPAREN          shift and go to state 6
    INT             shift and go to state 4
    LAST_BACKUP     shift and go to state 3
    MODIFIED        shift and go to state 1
    TRUE            shift and go to state 11
    FALSE           shift and go to state 10

    expr                           shift and go to state 28
    primary                        shift and go to state 2
    key                            shift and go to state 8
    time                           shift and go to state 9
    operand                        shift and go to state 7

state 20

    (7) expr -> expr EQUAL . expr
    (1) expr -> . expr OR expr
    (2) expr -> . expr AND expr
    (3) expr -> . expr LESS_EQUAL expr
    (4) expr -> . expr LESS expr
    (5) expr -> . expr GREAT_EQUAL expr
    (6) expr -> . expr GREATER expr
    (7) expr -> . expr EQUAL expr
    (8) expr -> . expr PLUS expr
    (10) expr -> . operand
    (11) expr -> . primary
    (12) operand -> . time
    (13) operand -> . key
    (9) primary -> . LPAREN expr RPAREN
    (14) time -> . INT frame
    (19) key -> . LAST_BACKUP
    (20) key -> . MODIFIED
    (21) key -> . TRUE
    (22) key -> . FALSE

    LPAREN          shift and go to state 6
    INT             shift and go to state 4
    LAST_BACKUP     shift and go to state 3
    MODIFIED        shift and go to state 1
    TRUE            shift and go to state 11
    FALSE           shift and go to state 10

    expr                           shift and go to state 29
    primary                        shift and go to state 2
    key                            shift and go to state 8
    time                           shift and go to state 9
    operand                        shift and go to state 7

state 21

    (1) expr -> expr OR . expr
    (1) expr -> . expr OR expr
    (2) expr -> . expr AND expr
    (3) expr -> . expr LESS_EQUAL expr
    (4) expr -> . expr LESS expr
    (5) expr -> . expr GREAT_EQUAL expr
    (6) expr -> . expr GREATER expr
    (7) expr -> . expr EQUAL expr
    (8) expr -> . expr PLUS expr
    (10) expr -> . operand
    (11) expr -> . primary
    (12) operand -> . time
    (13) operand -> . key
    (9) primary -> . LPAREN expr RPAREN
    (14) time -> . INT frame
    (19) key -> . LAST_BACKUP
    (20) key -> . MODIFIED
    (21) key -> . TRUE
    (22) key -> . FALSE

    LPAREN          shift and go to state 6
    INT             shift and go to state 4
    LAST_BACKUP     shift and go to state 3
    MODIFIED        shift and go to state 1
    TRUE            shift and go to state 11
    FALSE           shift and go to state 10

    expr                           shift and go to state 30
    primary                        shift and go to state 2
    key                            shift and go to state 8
    time                           shift and go to state 9
    operand                        shift and go to state 7

state 22

    (8) expr -> expr PLUS . expr
    (1) expr -> . expr OR expr
    (2) expr -> . expr AND expr
    (3) expr -> . expr LESS_EQUAL expr
    (4) expr -> . expr LESS expr
    (5) expr -> . expr GREAT_EQUAL expr
    (6) expr -> . expr GREATER expr
    (7) expr -> . expr EQUAL expr
    (8) expr -> . expr PLUS expr
    (10) expr -> . operand
    (11) expr -> . primary
    (12) operand -> . time
    (13) operand -> . key
    (9) primary -> . LPAREN expr RPAREN
    (14) time -> . INT frame
    (19) key -> . LAST_BACKUP
    (20) key -> . MODIFIED
    (21) key -> . TRUE
    (22) key -> . FALSE

    LPAREN          shift and go to state 6
    INT             shift and go to state 4
    LAST_BACKUP     shift and go to state 3
    MODIFIED        shift and go to state 1
    TRUE            shift and go to state 11
    FALSE           shift and go to state 10

    expr                           shift and go to state 31
    primary                        shift and go to state 2
    key                            shift and go to state 8
    time                           shift and go to state 9
    operand                        shift and go to state 7

state 23

    (3) expr -> expr LESS_EQUAL . expr
    (1) expr -> . expr OR expr
    (2) expr -> . expr AND expr
    (3) expr -> . expr LESS_EQUAL expr
    (4) expr -> . expr LESS expr
    (5) expr -> . expr GREAT_EQUAL expr
    (6) expr -> . expr GREATER expr
    (7) expr -> . expr EQUAL expr
    (8) expr -> . expr PLUS expr
    (10) expr -> . operand
    (11) expr -> . primary
    (12) operand -> . time
    (13) operand -> . key
    (9) primary -> . LPAREN expr RPAREN
    (14) time -> . INT frame
    (19) key -> . LAST_BACKUP
    (20) key -> . MODIFIED
    (21) key -> . TRUE
    (22) key -> . FALSE

    LPAREN          shift and go to state 6
    INT             shift and go to state 4
    LAST_BACKUP     shift and go to state 3
    MODIFIED        shift and go to state 1
    TRUE            shift and go to state 11
    FALSE           shift and go to state 10

    expr                           shift and go to state 32
    primary                        shift and go to state 2
    key                            shift and go to state 8
    time                           shift and go to state 9
    operand                        shift and go to state 7

state 24

    (5) expr -> expr GREAT_EQUAL . expr
    (1) expr -> . expr OR expr
    (2) expr -> . expr AND expr
    (3) expr -> . expr LESS_EQUAL expr
    (4) expr -> . expr LESS expr
    (5) expr -> . expr GREAT_EQUAL expr
    (6) expr -> . expr GREATER expr
    (7) expr -> . expr EQUAL expr
    (8) expr -> . expr PLUS expr
    (10) expr -> . operand
    (11) expr -> . primary
    (12) operand -> . time
    (13) operand -> . key
    (9) primary -> . LPAREN expr RPAREN
    (14) time -> . INT frame
    (19) key -> . LAST_BACKUP
    (20) key -> . MODIFIED
    (21) key -> . TRUE
    (22) key -> . FALSE

    LPAREN          shift and go to state 6
    INT             shift and go to state 4
    LAST_BACKUP     shift and go to state 3
    MODIFIED        shift and go to state 1
    TRUE            shift and go to state 11
    FALSE           shift and go to state 10

    expr                           shift and go to state 33
    primary                        shift and go to state 2
    key                            shift and go to state 8
    time                           shift and go to state 9
    operand                        shift and go to state 7

state 25

    (9) primary -> LPAREN expr . RPAREN
    (1) expr -> expr . OR expr
    (2) expr -> expr . AND expr
    (3) expr -> expr . LESS_EQUAL expr
    (4) expr -> expr . LESS expr
    (5) expr -> expr . GREAT_EQUAL expr
    (6) expr -> expr . GREATER expr
    (7) expr -> expr . EQUAL expr
    (8) expr -> expr . PLUS expr

    RPAREN          shift and go to state 34
    OR              shift and go to state 21
    AND             shift and go to state 17
    LESS_EQUAL      shift and go to state 23
    LESS            shift and go to state 19
    GREAT_EQUAL     shift and go to state 24
    GREATER         shift and go to state 18
    EQUAL           shift and go to state 20
    PLUS            shift and go to state 22


state 26

    (2) expr -> expr AND expr .
    (1) expr -> expr . OR expr
    (2) expr -> expr . AND expr
    (3) expr -> expr . LESS_EQUAL expr
    (4) expr -> expr . LESS expr
    (5) expr -> expr . GREAT_EQUAL expr
    (6) expr -> expr . GREATER expr
    (7) expr -> expr . EQUAL expr
    (8) expr -> expr . PLUS expr

    OR              reduce using rule 2 (expr -> expr AND expr .)
    AND             reduce using rule 2 (expr -> expr AND expr .)
    $end            reduce using rule 2 (expr -> expr AND expr .)
    RPAREN          reduce using rule 2 (expr -> expr AND expr .)
    LESS_EQUAL      shift and go to state 23
    LESS            shift and go to state 19
    GREAT_EQUAL     shift and go to state 24
    GREATER         shift and go to state 18
    EQUAL           shift and go to state 20
    PLUS            shift and go to state 22

  ! LESS_EQUAL      [ reduce using rule 2 (expr -> expr AND expr .) ]
  ! LESS            [ reduce using rule 2 (expr -> expr AND expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 2 (expr -> expr AND expr .) ]
  ! GREATER         [ reduce using rule 2 (expr -> expr AND expr .) ]
  ! EQUAL           [ reduce using rule 2 (expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 2 (expr -> expr AND expr .) ]
  ! OR              [ shift and go to state 21 ]
  ! AND             [ shift and go to state 17 ]


state 27

    (6) expr -> expr GREATER expr .
    (1) expr -> expr . OR expr
    (2) expr -> expr . AND expr
    (3) expr -> expr . LESS_EQUAL expr
    (4) expr -> expr . LESS expr
    (5) expr -> expr . GREAT_EQUAL expr
    (6) expr -> expr . GREATER expr
    (7) expr -> expr . EQUAL expr
    (8) expr -> expr . PLUS expr

    OR              reduce using rule 6 (expr -> expr GREATER expr .)
    AND             reduce using rule 6 (expr -> expr GREATER expr .)
    LESS_EQUAL      reduce using rule 6 (expr -> expr GREATER expr .)
    LESS            reduce using rule 6 (expr -> expr GREATER expr .)
    GREAT_EQUAL     reduce using rule 6 (expr -> expr GREATER expr .)
    GREATER         reduce using rule 6 (expr -> expr GREATER expr .)
    EQUAL           reduce using rule 6 (expr -> expr GREATER expr .)
    $end            reduce using rule 6 (expr -> expr GREATER expr .)
    RPAREN          reduce using rule 6 (expr -> expr GREATER expr .)
    PLUS            shift and go to state 22

  ! PLUS            [ reduce using rule 6 (expr -> expr GREATER expr .) ]
  ! OR              [ shift and go to state 21 ]
  ! AND             [ shift and go to state 17 ]
  ! LESS_EQUAL      [ shift and go to state 23 ]
  ! LESS            [ shift and go to state 19 ]
  ! GREAT_EQUAL     [ shift and go to state 24 ]
  ! GREATER         [ shift and go to state 18 ]
  ! EQUAL           [ shift and go to state 20 ]


state 28

    (4) expr -> expr LESS expr .
    (1) expr -> expr . OR expr
    (2) expr -> expr . AND expr
    (3) expr -> expr . LESS_EQUAL expr
    (4) expr -> expr . LESS expr
    (5) expr -> expr . GREAT_EQUAL expr
    (6) expr -> expr . GREATER expr
    (7) expr -> expr . EQUAL expr
    (8) expr -> expr . PLUS expr

    OR              reduce using rule 4 (expr -> expr LESS expr .)
    AND             reduce using rule 4 (expr -> expr LESS expr .)
    LESS_EQUAL      reduce using rule 4 (expr -> expr LESS expr .)
    LESS            reduce using rule 4 (expr -> expr LESS expr .)
    GREAT_EQUAL     reduce using rule 4 (expr -> expr LESS expr .)
    GREATER         reduce using rule 4 (expr -> expr LESS expr .)
    EQUAL           reduce using rule 4 (expr -> expr LESS expr .)
    $end            reduce using rule 4 (expr -> expr LESS expr .)
    RPAREN          reduce using rule 4 (expr -> expr LESS expr .)
    PLUS            shift and go to state 22

  ! PLUS            [ reduce using rule 4 (expr -> expr LESS expr .) ]
  ! OR              [ shift and go to state 21 ]
  ! AND             [ shift and go to state 17 ]
  ! LESS_EQUAL      [ shift and go to state 23 ]
  ! LESS            [ shift and go to state 19 ]
  ! GREAT_EQUAL     [ shift and go to state 24 ]
  ! GREATER         [ shift and go to state 18 ]
  ! EQUAL           [ shift and go to state 20 ]


state 29

    (7) expr -> expr EQUAL expr .
    (1) expr -> expr . OR expr
    (2) expr -> expr . AND expr
    (3) expr -> expr . LESS_EQUAL expr
    (4) expr -> expr . LESS expr
    (5) expr -> expr . GREAT_EQUAL expr
    (6) expr -> expr . GREATER expr
    (7) expr -> expr . EQUAL expr
    (8) expr -> expr . PLUS expr

    OR              reduce using rule 7 (expr -> expr EQUAL expr .)
    AND             reduce using rule 7 (expr -> expr EQUAL expr .)
    EQUAL           reduce using rule 7 (expr -> expr EQUAL expr .)
    $end            reduce using rule 7 (expr -> expr EQUAL expr .)
    RPAREN          reduce using rule 7 (expr -> expr EQUAL expr .)
    LESS_EQUAL      shift and go to state 23
    LESS            shift and go to state 19
    GREAT_EQUAL     shift and go to state 24
    GREATER         shift and go to state 18
    PLUS            shift and go to state 22

  ! LESS_EQUAL      [ reduce using rule 7 (expr -> expr EQUAL expr .) ]
  ! LESS            [ reduce using rule 7 (expr -> expr EQUAL expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 7 (expr -> expr EQUAL expr .) ]
  ! GREATER         [ reduce using rule 7 (expr -> expr EQUAL expr .) ]
  ! PLUS            [ reduce using rule 7 (expr -> expr EQUAL expr .) ]
  ! OR              [ shift and go to state 21 ]
  ! AND             [ shift and go to state 17 ]
  ! EQUAL           [ shift and go to state 20 ]


state 30

    (1) expr -> expr OR expr .
    (1) expr -> expr . OR expr
    (2) expr -> expr . AND expr
    (3) expr -> expr . LESS_EQUAL expr
    (4) expr -> expr . LESS expr
    (5) expr -> expr . GREAT_EQUAL expr
    (6) expr -> expr . GREATER expr
    (7) expr -> expr . EQUAL expr
    (8) expr -> expr . PLUS expr

    OR              reduce using rule 1 (expr -> expr OR expr .)
    $end            reduce using rule 1 (expr -> expr OR expr .)
    RPAREN          reduce using rule 1 (expr -> expr OR expr .)
    AND             shift and go to state 17
    LESS_EQUAL      shift and go to state 23
    LESS            shift and go to state 19
    GREAT_EQUAL     shift and go to state 24
    GREATER         shift and go to state 18
    EQUAL           shift and go to state 20
    PLUS            shift and go to state 22

  ! AND             [ reduce using rule 1 (expr -> expr OR expr .) ]
  ! LESS_EQUAL      [ reduce using rule 1 (expr -> expr OR expr .) ]
  ! LESS            [ reduce using rule 1 (expr -> expr OR expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 1 (expr -> expr OR expr .) ]
  ! GREATER         [ reduce using rule 1 (expr -> expr OR expr .) ]
  ! EQUAL           [ reduce using rule 1 (expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 1 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 21 ]


state 31

    (8) expr -> expr PLUS expr .
    (1) expr -> expr . OR expr
    (2) expr -> expr . AND expr
    (3) expr -> expr . LESS_EQUAL expr
    (4) expr -> expr . LESS expr
    (5) expr -> expr . GREAT_EQUAL expr
    (6) expr -> expr . GREATER expr
    (7) expr -> expr . EQUAL expr
    (8) expr -> expr . PLUS expr

    OR              reduce using rule 8 (expr -> expr PLUS expr .)
    AND             reduce using rule 8 (expr -> expr PLUS expr .)
    LESS_EQUAL      reduce using rule 8 (expr -> expr PLUS expr .)
    LESS            reduce using rule 8 (expr -> expr PLUS expr .)
    GREAT_EQUAL     reduce using rule 8 (expr -> expr PLUS expr .)
    GREATER         reduce using rule 8 (expr -> expr PLUS expr .)
    EQUAL           reduce using rule 8 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 8 (expr -> expr PLUS expr .)
    $end            reduce using rule 8 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 8 (expr -> expr PLUS expr .)

  ! OR              [ shift and go to state 21 ]
  ! AND             [ shift and go to state 17 ]
  ! LESS_EQUAL      [ shift and go to state 23 ]
  ! LESS            [ shift and go to state 19 ]
  ! GREAT_EQUAL     [ shift and go to state 24 ]
  ! GREATER         [ shift and go to state 18 ]
  ! EQUAL           [ shift and go to state 20 ]
  ! PLUS            [ shift and go to state 22 ]


state 32

    (3) expr -> expr LESS_EQUAL expr .
    (1) expr -> expr . OR expr
    (2) expr -> expr . AND expr
    (3) expr -> expr . LESS_EQUAL expr
    (4) expr -> expr . LESS expr
    (5) expr -> expr . GREAT_EQUAL expr
    (6) expr -> expr . GREATER expr
    (7) expr -> expr . EQUAL expr
    (8) expr -> expr . PLUS expr

    OR              reduce using rule 3 (expr -> expr LESS_EQUAL expr .)
    AND             reduce using rule 3 (expr -> expr LESS_EQUAL expr .)
    LESS_EQUAL      reduce using rule 3 (expr -> expr LESS_EQUAL expr .)
    LESS            reduce using rule 3 (expr -> expr LESS_EQUAL expr .)
    GREAT_EQUAL     reduce using rule 3 (expr -> expr LESS_EQUAL expr .)
    GREATER         reduce using rule 3 (expr -> expr LESS_EQUAL expr .)
    EQUAL           reduce using rule 3 (expr -> expr LESS_EQUAL expr .)
    $end            reduce using rule 3 (expr -> expr LESS_EQUAL expr .)
    RPAREN          reduce using rule 3 (expr -> expr LESS_EQUAL expr .)
    PLUS            shift and go to state 22

  ! PLUS            [ reduce using rule 3 (expr -> expr LESS_EQUAL expr .) ]
  ! OR              [ shift and go to state 21 ]
  ! AND             [ shift and go to state 17 ]
  ! LESS_EQUAL      [ shift and go to state 23 ]
  ! LESS            [ shift and go to state 19 ]
  ! GREAT_EQUAL     [ shift and go to state 24 ]
  ! GREATER         [ shift and go to state 18 ]
  ! EQUAL           [ shift and go to state 20 ]


state 33

    (5) expr -> expr GREAT_EQUAL expr .
    (1) expr -> expr . OR expr
    (2) expr -> expr . AND expr
    (3) expr -> expr . LESS_EQUAL expr
    (4) expr -> expr . LESS expr
    (5) expr -> expr . GREAT_EQUAL expr
    (6) expr -> expr . GREATER expr
    (7) expr -> expr . EQUAL expr
    (8) expr -> expr . PLUS expr

    OR              reduce using rule 5 (expr -> expr GREAT_EQUAL expr .)
    AND             reduce using rule 5 (expr -> expr GREAT_EQUAL expr .)
    LESS_EQUAL      reduce using rule 5 (expr -> expr GREAT_EQUAL expr .)
    LESS            reduce using rule 5 (expr -> expr GREAT_EQUAL expr .)
    GREAT_EQUAL     reduce using rule 5 (expr -> expr GREAT_EQUAL expr .)
    GREATER         reduce using rule 5 (expr -> expr GREAT_EQUAL expr .)
    EQUAL           reduce using rule 5 (expr -> expr GREAT_EQUAL expr .)
    $end            reduce using rule 5 (expr -> expr GREAT_EQUAL expr .)
    RPAREN          reduce using rule 5 (expr -> expr GREAT_EQUAL expr .)
    PLUS            shift and go to state 22

  ! PLUS            [ reduce using rule 5 (expr -> expr GREAT_EQUAL expr .) ]
  ! OR              [ shift and go to state 21 ]
  ! AND             [ shift and go to state 17 ]
  ! LESS_EQUAL      [ shift and go to state 23 ]
  ! LESS            [ shift and go to state 19 ]
  ! GREAT_EQUAL     [ shift and go to state 24 ]
  ! GREATER         [ shift and go to state 18 ]
  ! EQUAL           [ shift and go to state 20 ]


state 34

    (9) primary -> LPAREN expr RPAREN .

    OR              reduce using rule 9 (primary -> LPAREN expr RPAREN .)
    AND             reduce using rule 9 (primary -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 9 (primary -> LPAREN expr RPAREN .)
    LESS            reduce using rule 9 (primary -> LPAREN expr RPAREN .)
    GREAT_EQUAL     reduce using rule 9 (primary -> LPAREN expr RPAREN .)
    GREATER         reduce using rule 9 (primary -> LPAREN expr RPAREN .)
    EQUAL           reduce using rule 9 (primary -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 9 (primary -> LPAREN expr RPAREN .)
    $end            reduce using rule 9 (primary -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 9 (primary -> LPAREN expr RPAREN .)

